{% extends "layouts/main.jinja" %}
{% import 'macros/legal.jinja' as legal %}{# TODO: is this still being used? #}
{% import 'macros/breadcrumbs.jinja' as breadcrumb %}

{% set breadcrumb_links=[('/legal-resources', 'Legal resources')] %}
{% set result_entities = results.get(result_type, []) %}

{% block title %}
  {%- if query -%}
  Searching {{ document_type_display_name }} for &ldquo;{{ query }}&rdquo;
  {%- else -%}
  Search {{ document_type_display_name }}
  {%- endif -%}
{% endblock %}

{% block css %}
<link rel="stylesheet" type="text/css"  href="{{ path_for_css('legal.css') }}" />
{% endblock %}

{% block header %}
{% endblock %}

{% block body %}

{% block search %}
<section class="main__content--full data-container__wrapper dataTables_wrapper">
  <div id="filters" class="filters is-open">
    <button class="filters__header filters__toggle js-filter-toggle" type="button">
      <span class="filters__title">Edit filters</span>
    </button>
    <div class="filters__content">
      <form id="category-filters" action="/data/legal/search/{{ result_type | replace('_', '-') }}">
        <input id="search-type" type="hidden" name="search_type" value="{{ result_type }}">
        {% block filters %}
        {% endblock %}
      </form>
    </div>
  </div>
  <div id="results-{{ result_type }}" class="content__section u-no-padding">
    <div class="data-container__widgets u-no-border">
      <div class="data-container__head">
        <h1 class="data-container__title">{{ document_type_display_name }}</h1>
      </div>
      {% if document_type_display_name == 'Statutes' %}
      <div class="u-padding--left u-padding--right">
        <div class="message message--info">
          <p>
            The statutes search feature includes the Federal Election Campaign Act (52 U.S.C. §§ 30101 to 30146), the Presidential Election Campaign Fund Act (26 U.S.C. §§ 9001 to 9013) and the Presidential Primary Matching Payment Account Act (26 U.S.C. §§ 9031 to 9042). You can search statutes using keywords from section titles and/or statutory citations.
          </p>
        </div>
      </div>
      {% endif %}
      <div class="u-padding--left u-padding--right">
        {% block message %}{% endblock %}
      </div>
    </div>
    {% if results.total_all %}
      {% block results %}{% endblock %}
    {% else %}
    <div class="u-padding--left u-padding--right">
      <div class="message message--no-icon">
        <h2 class="message__title">No results</h2>
        <p>Sorry, we didn&rsquo;t find any documents matching {% if query %}<span class="t-bold">{{ query }}</span>{% else %}your search{% endif %}.</p>
        <div class="message--alert__bottom">
          <p>Think this was a mistake?</p>
          <ul class="list--buttons">
            {% if query %}
            <li><a class="button button--standard" href="/search/?query={{ query }}">Try FEC.gov</a></li>
            {% endif %}
            <li><a class="button button--standard" href="mailto:{{ WEBMANAGER_EMAIL }}">Email our team</a></li>
            <li><a class="button button--standard" href="https://github.com/fecgov/fec/issues">File an issue</a></li>
          </ul>
        </div>
      </div>
    </div>
    {% endif %}
  </div>
</section>
{% endblock %}

{% include 'partials/legal-disclaimer.jinja' %}
{% endblock %}

{% block modals %}
  {% include 'partials/legal-keyword-modal.jinja' %}
{% endblock %}

{% block scripts %}
  {#- data-init and global chunks are loaded by main.jinja -#}
  {{ tags_for_js_chunks('legal.js', '')|safe }}
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Select all elements with the class 'tag__remove'
      const removeButtons = document.querySelectorAll('.tag__remove');

      // Iterate over each remove button and add a click event listener
      removeButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tag = this.getAttribute('data-tag');
          const url = new URL(window.location);

          // Remove tags logic
          if (tag === 'query') {
            url.searchParams.delete('search');
            url.searchParams.delete('search_exclude');
          } else if (tag && tag.startsWith('doc_category_')) {
            const index = tag.split('_')[2];
            const selectedCaseCategories = url.searchParams.getAll('case_doc_category_id');
            url.searchParams.delete('case_doc_category_id');
            selectedCaseCategories.forEach((cat, i) => {
              if (i != index) {
                url.searchParams.append('case_doc_category_id', cat);
              }
            });

            const selectedAoCategories = url.searchParams.getAll('ao_category');
            url.searchParams.delete('ao_category');
            selectedAoCategories.forEach((cat, i) => {
              if (i != index) {
                url.searchParams.append('ao_category', cat);
              }
            });
          } else {
            url.searchParams.delete(tag);
          }

          // Update the URL without reloading the page
          window.history.pushState({}, '', url.toString());
        });
      });

      // Handle 'ao_regulatory_citation' when checkboxes are checked or unchecked
      const regulationsField = document.querySelector('#regulations-field ul.dropdown__selected');
      if (regulationsField) {
        // Listen for changes in checkboxes inside the dropdown__selected list
        regulationsField.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
          checkbox.addEventListener('change', function(event) {
            const citation = checkbox.getAttribute('name');
            const url = new URL(window.location);

            if (checkbox.checked) {
              // Add citation to URL if checkbox is checked
              url.searchParams.append('ao_regulatory_citation', citation);
            } else {
              // Remove citation from URL if checkbox is unchecked
              const citations = url.searchParams.getAll('ao_regulatory_citation');
              url.searchParams.delete('ao_regulatory_citation');
              
              // Re-add all citations except the one that was unchecked
              citations.forEach(existingCitation => {
                if (existingCitation !== citation) {
                  url.searchParams.append('ao_regulatory_citation', existingCitation);
                }
              });
            }
            // Update the URL without reloading the page
            window.history.pushState({}, '', url.toString());
          });
        });
      }
    });
  </script>

{% endblock %}
